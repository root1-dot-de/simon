<?xml version="1.0" encoding="UTF-8"?>
<project name="SIMON" default="create_package" basedir=".">
    <description>
    	SIMON: a kind of router-friendly RMI replacement
    </description>
	
	<property name="version" value="NIO_0.1b"/>
	
	<!-- destination of compiled and jared lib -->
	<property name="dist" location="dist"/>
	
	<!-- destination of compiled project -->
	<property name="build" location="build"/>		
	<!-- destination for compiles sources -->
	<property name="build.sources" location="${build}/src/"/>
	<property name="build.classes" location="${build}/bin/"/> 
	<property name="build.doc" location="${build}/doc"/>
	
	<!-- location of source code -->
	<property name="src" location="src"/>
	
	<!-- the classpath -->
	<path id="classpath">
		<fileset dir="${build.sources}">
			<include name="**/*"/>
		</fileset>
    </path>
	
	<!-- clean up -->
    <target name="clean" description="Remove the output directories">
        <delete dir="${build}"/>
    	<delete dir="${dist}"/>
	</target>
	
	<!-- stuff before compiling -->
	<target name="praeambel"  description="compiles all">
   	
		<!-- memory timestamp -->
   		<tstamp>
			<format property="build.timestamp" pattern="yyyyMMddHHmm"/>
	   	</tstamp>
   		
   		<!-- Optional: 
   			This command get's the revision numer from the subversion system
   			This requires the SVN commandline-package 
   			It can be downloaded here: 
   			http://subversion.tigris.org/files/documents/15/32856/svn-1.3.2-setup.exe
   			If the commandline tool is not available, no revision number will be extracted -->
    	<exec dir="." executable="svnversion" outputproperty="build.revision" failifexecutionfails="false" resultproperty="svnreccode">
    	  <arg line="-n ."/>
    	</exec>
		<echo>Creating package...</echo>
		<echo>revision=${build.revision}</echo>
		<echo>timestamp=${build.timestamp}</echo>
		<echo>version=${version}</echo>

	</target>
	
	<!-- create all important directories and copy files -->
	<target name="init" depends="praeambel" description="Create the output directories.">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.classes}"/>
		<mkdir dir="${build.sources}"/>
		<mkdir dir="${build.doc}"/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist}/src"/>
			
    	<mkdir dir="${build.doc}"/>
        <javadoc 	access="public" 
        		 	author="true" 
        			classpath="" 
        			destdir="${build.doc}" 
        			doctitle="SIMON API Documentation" 
        			nodeprecated="false" 
        			nodeprecatedlist="false" 
        			noindex="false" 
        			nonavbar="false" 
        			notree="false" 
        			packagenames="de.root1.simon.*" 
        			source="1.5" 
        			sourcepath="src" 
        			splitindex="true" 
        			use="true" 
        			version="true"/>
		
		<copy todir="${build.sources}">
            <fileset dir="${src}">
                <include name="**/*"/>
			</fileset>
			<fileset dir=".">
				<include name="*.txt"/>
			</fileset>
		</copy>
		
		<copy todir="${dist}">
	        <fileset dir="${build.sources}">
	            <include name="*.txt"/>
			</fileset>
			<fileset dir="${build}">
                <include name="doc/**/*"/>
			</fileset>
		</copy>
		
		
    </target>
	



    <!-- compile all the stuff -->
    <target name="compile_src" depends="init" description="Compile the source.">
        <javac destdir="${build.classes}"
               optimize="on"
               debug="on"
               source="1.5"
               target="1.5"
               nowarn="off">
            <src path="${build.sources}"/>
            <classpath refid="classpath"/>   
        </javac>
    </target>
    
	<!-- create the jar  -->
	<target name="create_jar"
            depends="compile_src"
            description="Create the jar file">

		<copy todir="${dist}/src">
	        <fileset dir="${build.sources}">
	            <include name="**/*"/>
			</fileset>
		</copy>
		
        <jar destfile="${dist}/SIMON-NIO-BRANCH.jar">
            <fileset dir="${build.classes}"/>
            <manifest>				
            </manifest>
        </jar>

	</target>  

	<!-- create the package -->
	<target name="create_package"
            depends="create_jar"
            description="Create a complete package">

		 <zip destfile="${dist}/SIMON-${version}-build${build.timestamp}.zip"
		       basedir="${dist}"
		       includes="**/*"
		  />
	</target>  

</project>