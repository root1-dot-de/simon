############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler
handlers=java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= ALL

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.

#  A pattern consists of a string that includes the following 
#  special components that will be replaced at runtime:
#
#    * "/" the local pathname separator
#    * "%t" the system temporary directory
#    * "%h" the value of the "user.home" system property
#    * "%g" the generation number to distinguish rotated logs
#    * "%u" a unique number to resolve conflicts
#    * "%%" translates to a single percent sign "%" 
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/simon_debug_%u.log
java.util.logging.FileHandler.pattern = simon_debug.log
java.util.logging.FileHandler.limit = 5000000
#java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.count = 5
java.util.logging.FileHandler.formatter = de.root1.simon.utils.ConsoleLogFormatter

# Limit the message that are printed on the console to INFO and above.
# This limit can be overridden by facility specific properties, so that the log
# is being processed, but the output is suppressed!
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = de.root1.simon.utils.ConsoleLogFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
# com.xyz.foo.level = ALL
# de.root1.simon.experiments.LogTester.level = ALL
de.root1.simon.level=ALL
